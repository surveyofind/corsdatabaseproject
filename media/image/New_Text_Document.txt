    15.000000   18.000000   78.000000  81.000000  0.08333000  0.08333000
    Latitude(start) Latitude(end) longitude(start) longitude(end)  ehight(start) ehight(end) 
    -75.134   -75.115   -75.076   -75.029   -74.968   -74.899   -74.846 -74.842   -74.877   -74.920   -74.986   -75.065   -75.107   -75.124  -75.139   -75.208   -75.294   -75.340   -75.324   -75.251   -75.177  -75.128   -75.102   -75.065   -75.024   -74.981   -74.926   -74.901
    -74.897   -74.856   -74.861   -74.870   -74.872   -74.877   -74.808  -74.670   -74.529





def interpolate(grid, lat, lon):
    lat_start = grid['Latitude(start)']
    lon_start = grid['longitude(start)']
    lat_index = int((lat - lat_start) / 0.08333000)
    lon_index = int((lon - lon_start) / 0.08333000)
    
    lat_fraction = (lat - lat_start) / 0.08333000 - lat_index
    lon_fraction = (lon - lon_start) / 0.08333000 - lon_index
    
    if lat_index < 0 or lon_index < 0 or lat_index >= len(grid['data']) - 1 or lon_index >= len(grid['data'][0]) - 1:
        return "Coordinates out of bounds"
    
    value = (1 - lat_fraction) * (1 - lon_fraction) * grid['data'][lat_index][lon_index] + \
            lat_fraction * (1 - lon_fraction) * grid['data'][lat_index + 1][lon_index] + \
            (1 - lat_fraction) * lon_fraction * grid['data'][lat_index][lon_index + 1] + \
            lat_fraction * lon_fraction * grid['data'][lat_index + 1][lon_index + 1]
    
    return value

# Example usage
grid = {
    'Latitude(start)': 15.000000,
    'longitude(start)': 78.000000,
    'data': [
        [-75.134, -75.115, -75.076, -75.029, -74.968, -74.899, -74.846, -74.842, -74.877, -74.920, -74.986, -75.065, -75.107, -75.124, -75.139, -75.208, -75.294, -75.340, -75.324, -75.251, -75.177, -75.128, -75.102, -75.065, -75.024, -74.981, -74.926, -74.901, -74.897, -74.856, -74.861, -74.870, -74.872, -74.877, -74.808, -74.670, -74.529,-75.398, -75.386, -75.328, -75.294, -75.268, -75.228, -75.177, -75.141, -75.163, -75.205, -75.251, -75.328, -75.371, -75.388, -75.412, -75.495, -75.607, -75.651, -75.631, -75.565, -75.492, -75.443, -75.413, -75.379, -75.312, -75.228, -75.140, -75.080, -75.111, -75.101, -75.088, -75.081, -75.062, -75.098, -75.055, -74.919, -74.766,-75.680, -75.671, -75.612, -75.561, -75.529, -75.512, -75.498, -75.470, -75.476, -75.520, -75.562, -75.634, -75.688, -75.716, -75.773, -75.855, -75.941, -75.987, -75.975, -75.928, -75.871, -75.821, -75.776, -75.726, -75.633, -75.537, -75.451, -75.324, -75.345, -75.424, -75.450, -75.448, -75.391, -75.378, -75.334, -75.199, -75.019,-75.979, -75.974, -75.937, -75.871, -75.808, -75.785, -75.794, -75.801, -75.808, -75.856, -75.931, -76.019, -76.093, -76.131, -76.189, -76.265, -76.318, -76.350, -76.354, -76.334, -76.299, -76.238, -76.171, -76.099, -76.009, -75.902, -75.828, -75.748, -75.736, -75.782, -75.795, -75.798, -75.739, -75.680, -75.612, -75.469, -75.286,-76.267, -76.280, -76.258, -76.196, -76.114, -76.082, -76.104,
    -76.150, -76.198, -76.239, -76.317, -76.422, -76.514, -76.573,
    -76.627, -76.685, -76.716, -76.729, -76.740, -76.738, -76.730,
    -76.679, -76.595, -76.500, -76.425, -76.337, -76.262, -76.213,
    -76.151, -76.120, -76.084, -76.050, -76.008, -75.947, -75.852,
    -75.705, -75.522, -76.527, -76.552, -76.557, -76.536, -76.467, -76.432, -76.456,
    -76.509, -76.588, -76.663, -76.742, -76.835, -76.930, -77.000,
    -77.057, -77.100, -77.128, -77.137, -77.151, -77.157, -77.160,
    -77.123, -77.043, -76.940, -76.849, -76.790, -76.720, -76.641,
    -76.526, -76.426, -76.337, -76.261, -76.196, -76.129, -76.038,
    -75.895, -75.685,-76.762, -76.796, -76.829, -76.838, -76.805, -76.796, -76.835,
    -76.905, -76.987, -77.088, -77.186, -77.265, -77.360, -77.430,
    -77.491, -77.533, -77.563, -77.567, -77.576, -77.588, -77.588,
    -77.562, -77.495, -77.415, -77.323, -77.255, -77.161, -77.040,
    -76.871, -76.678, -76.537, -76.445, -76.340, -76.269, -76.218,
    -76.057, -75.796,-77.041, -77.069, -77.115, -77.146, -77.160, -77.198, -77.256,
    -77.339, -77.430, -77.524, -77.629, -77.708, -77.791, -77.859,
    -77.926, -77.974, -78.014, -78.037, -78.041, -78.047, -78.041,
    -78.022, -77.962, -77.886, -77.795, -77.708, -77.594, -77.441,
    -77.241, -77.018, -76.815, -76.653, -76.532, -76.445, -76.390,
    -76.268, -76.072,-77.332, -77.343, -77.382, -77.444, -77.503, -77.560, -77.636,
    -77.712, -77.809, -77.906, -78.021, -78.134, -78.222, -78.296,
    -78.360, -78.419, -78.473, -78.515, -78.524, -78.524, -78.521,
    -78.505, -78.452, -78.376, -78.271, -78.152, -78.008, -77.837,
    -77.652, -77.431, -77.130, -76.863, -76.743, -76.649, -76.585,
    -76.526, -76.415,-77.645, -77.660, -77.689, -77.749, -77.820, -77.868, -77.959,
    -78.058, -78.161, -78.254, -78.386, -78.545, -78.645, -78.716,
    -78.775, -78.855, -78.927, -78.989, -79.020, -79.015, -79.007,
    -78.994, -78.950, -78.853, -78.719, -78.579, -78.428, -78.264,
    -78.102, -77.879, -77.552, -77.236, -77.034, -76.889, -76.838,
    -76.819, -76.747],  # Replace ellipsis with your actual data
       
    ]
}

# Example coordinates
lat = 15.00000002
lon = 78.00000002

result = interpolate(grid, lat, lon)
print("Interpolated value:", result)
